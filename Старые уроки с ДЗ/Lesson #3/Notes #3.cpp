#include <iostream>
#include <string>
using namespace std;


int main()
{
	/*
		В С++ представлено целых три вида циклов.
		Рассмотрим цикл while (от англ. "пока").
		Смысл передан правильно: пока какое-то
		условие истинно, то выполняется некий блок кода
	*/

	/*
		В нижеприведённой программе если введённые пользователем
		булевые значения соответсуют условию (Коньъюкции этих двух
		значений), то выведется Hello 
	*/

	bool flag1 , flag2;
	cin >> flag1 >> flag2;
	while (flag1 && flag2) {
		cout << "Hello" << endl;
	}

	/*
		После ключевого слова while в скобках пишется условие.
		Условием может быть любое булевое значение: хоть Дизъюнкция
		каких-либо двух операндов (значений), хоть просто true,
		хоть любое целое число int, которое имплицитно (скрыто)
		преобразуется в тип данных bool
	*/

	/*
		Кстати, если прописать следующую конструкцию,
		то будет выполняться бесконечный цикл
	*/

	while (true) {
		cout << "Hahahahaaha, i'm breaking your computer\n";
	}


	/*
		Следующий цикл - цикл do while (от англ. "делать пока").
		Отличается от цикла while тем, что ХОТЯ БЫ ОДНА итерация
		(один проход по циклу) выполнится ВСЕГДА. Как правило
		сейчас не используется, а времена использования оного
		считаются временами динозавров. В целом, любой цикл
		do while можно заменить на while при желании
	*/
	int iterationNumber = 0; // номер итерации
	do {
		cout << "Number of iteration of this loop is " << iterationNumber << endl;
	} while (iterationNumber < 23);

	/*
		Рассмотрим цикл for (от англ. "для"). В цикле for мы объявляем и
		инициализируем переменную счётчик, далее пишем условие для
		выполнения цикла, а в конце изменяем переменную счётчик.
		
		for (СТАРТ; УСЛОВИЕ; ШАГ) {
			тело цилка
		}

		Как помнишь, мы пробовали убирать УСЛОВИЕ и ШАГ из цикла. Данные
		действия рекомендуется выполнять только в случае необходимости.
		Перевод цикла for от английского соответсвует действительности:
		"ДЛЯ данной переменной мы создаём шаг изменения и условие окончания".
	*/

	// Ниже приведу вывод квадратов чисел от одного до десяти

	for (int i = 1; i <= 10; i++) { 
		cout << i * i << " ";
	}
	/*
		Мы инициализируем переменную i единичкой, после каждой итерации
		увеличивая её на один. В каждой итерации выводится её
		произведение на саму себя (квадрат этого числа)
	*/

	/*
		Замечу, что переменная
		i видна ТОЛЬКО в теле цикла. Если мы захотим обратиться к
		переменной i после цикла, то получим ошибку компилятора
	*/

	for (int i = 1; i <= 10; i++) {
		cout << i * i << " ";
	}

	i = 11; //ошибка


	/*
		Рассмотрим два полезных ключевых слова при работе
		с циклами: break и continue.
		Если в теле цикла мы натыкаемся на ключевое слово break,
		то мы выходим из цикла.
		Если в теле цикла мы натыкаемся на ключевое слово continue,
		то мы переходим на следующую итерацию этого же цикла.
	*/

	for (int i = 1; i <= 6; i++) {
		if (i % 2 == 0) {
			cout << "Just used Continue";
			continue;
		} // при чётных i мы переходим на следующую итерацию цикла
		// иначе выводится куб числа 
		cout << i * i * i << endl;
	}

	for (int i = 100; i >= -100; i -= 2) {
		cout << "This number is " << i << endl;
		if (i == 0) { 
			cout << "Number is " << i << "\nJust used break\n";
			break;
		}
	} /*
		Если число нолик, то выходим из цикла.  
	*/
	
			
			
	/*
		В дальнейшем возможно понадобится быстро
		выходить из вложенных циклов. Для этого можно использовать
		оператор goto, НО КРАЙНЕ не рекомендую этого делать - goto
		нарушает некоторые принципы программирования и в тебя
		условно будут тыкать пальцами. Можно использовать эту штуку
		на каких-нибудь олимпиадах да и только, поскольку там всем
		пофиг как хреново ты написал код - там главное чтоб все тесты 
		программа прошла
	*/

	label: // объявили метку с назвамием "label"
	for (int i = 1; i <= 120; i++) {
		for (int j = 0; j < 100; j++) {
			if (j == 50) {
				goto label;
				/*
					Когда переменная j равняется 50, то 
					мы благодаря оператору goto выйдем
					из вложенного цикла.
				*/
			}
		}

	}



	/*
		Решение задания 17 ЕГЭ

		Рассматривается множество целых чисел, принадлежащих числовому
		отрезку [1016; 7937], которые делятся на 3 и не делятся
		на 7, 17, 19, 27. Найдите количество таких чисел и максимальное
		из них. В ответе запишите два целых числа: 
		сначала количество, затем максимальное число.
	*/

	int cnt = 0;
	int max = 0;
	for (int x = 1016; x <= 7937; x++) {
		if (x % 3 == 0 && x % 7 != 0 && x % 17 != 0 && x % 27 != 0 && x % 19 != 0) {
			cnt++;
			max = x;
		}
	}
	cout << cnt << " " << max;

}
