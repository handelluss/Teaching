#include <iostream>
#include <cmath>
using namespace std;

double Sum(int a, int b);
double Sum(double a, double b);
void Line();

const double PI = 3.1415;

int main() {

	/*
		Итак, функции - фрагмент программного кода, к которому можно
		обратиться из (почти) любого места программы.

		Зачастую при программировании мы очень часто используем
		отдельные блоки кода, например, нам необходимо
		вывести большое количество раз строчку из звёздочек.
		Для этого напишем функцию Line() (cм. ЭТИ и ЭТИ строки
		кода)
	*/

	for (int k = 0; k < 50; k++) {
		Line();
	}

	/*
		Данная функция не возвращает никаких значений -
		она просто выполняет некоторый код, не более не менее 
		(в данном случае выводит звёздочки в консоль
		в одну строчку). Поэтому данная функция имеет
		тип возвращаемого значения void (см. строки 90-95)
	*/

	/*
		Напишем функцию, ВОЗВРАЩАЮЩАЯ некоторое значение.
		Пусть, будет возвращать сумму двух чисел. Таким образом,
		мы ПЕРЕДАЁМ в функцию два целочисленных значения 
		(ПАРАМЕТРА) типа int, а она нам дробное
		значение типа int (см. строки 80-84)
	*/

	double a = Sum(234, 12);
	cout << a << '\n';
	
	/*
		Мы можем ПЕРЕГРУЗИТЬ функцию, передав
		другие параметры (например значения другого типа, или просто
		другое количество значений).
		Перегрузим нашу функцию Sum(), сделав так, чтобы в неё
		можно было передать дробные значения типа double
		(см. строки 86-88)
	*/

	cout << Sum(10000.2, 1234.3) << "\n";

	/*
		Функция может возвращать любой тип данных: int, long, short,
		long long, double, bool, char, string (строки) и вообще
		любой пользовательский тип данных, которые мы с тобой
		в будущем будем писать. Ровно также, в функцию можно
		передавать сколько угодно параметров любого типа данных
		(в пределах разумного)
	*/

	/*
		Замечу, что в языке С++ существует уже куча
		разных заранее написанных функций: сортировочных, математических
		и куча куча разных. Например, подключив библиотеку cmath (см. 
		ЭТУ строку кода) мы можем использовать функцию abs, возвращающую
		модуль числа.
	*/

	double p = -213.4;
	cout << abs(p);
}


double Sum(int a, int b) {
	int result = a + b;
	return result;

}

double Sum(double a, double b) {
	return a + b;
}

void Line() {
	for (int i = 0; i < 50; i++) {
		cout << '*';
	}
	cout << endl;
}