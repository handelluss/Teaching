#include <iostream>
#include <string>
using namespace std;
int main()
{
	/*
		Рассмотрим тип данных char. 
		Данный тип хранит в себе символ
	*/
	
	char a = 'A';
	char b = '*';
	//char c = "1"; // ошибка - используем только одинарные кавычки
	char d = 'asd'; /* компилятор не воспримет данную запись как ошибку
		но так делать категорически нельзя: символьный тип вмещает
		в себя только ОДИН символ
	*/

	/*
		Все символы хранятся в таблице ASCII (American Standard
		Code for Information Interchange - от англ. "Американский стандарт
		кода для обмена информацией")
		Все символы пронумерованы от 0 до 127 - 128 символов
		Например большая латинская буковка A в списке 65
	*/
	 
	char ch = 65;
	cout << ch << endl;

	/*
		Если мы хотим получить буковку C, зная лишь номер буковки
		A, то достаточно знать, что буковка C в алфавите идёт второй,
		если считаем, что А - это 0
	*/
	ch += 2; // тоже, что ch = ch + 2
	// т.е., грубо говоря сдвигаемся на два символа вперёд
	cout << ch << endl;

	/*
		Используя следующую запись, мы преобразуем целое число 52
		в тип данных char - т.е., получаем символ из ASCII-таблицы под
		номером 52. В нашем случае это символ '4'
	*/
	
	cout << char(52) << endl;

	/*
		То, что мы использовали выше, называется эксплицитным (явным,
		открытым) преобразованием. Топиш, мы явно изменили тип данных
		значения. До этого язык С++ использовали имплицитные (скрытые)
		преобразования, например, когда целое число 10 преобразовывалось
		в true
	*/
	
	/*
		Выведем Латинский алфавит ниже, зная, что буковка a
		под номером 97
	*/

	for (char ch = 97; ch < 97 + 26; ch++) {
		cout << ch;
	}
	cout << endl;


	/*
		Из данных символов мы можем склеивать строчки
		как в примере ниже
	*/
	
	char ch1 = 'A', ch2 = 'n', ch3 = 't', ch4 = 'o', ch5 = 'n';
	cout << ch1 << ch2 << ch3 << ch4 << ch5 << endl;

	/*
		Для использования некоторых специальных символов необходимо
		использовать Escape-последовательности. Вот самые частые
		из них:

			'\n' - перенос строки
			'\t' - табуляция
			'\'' - одинарная кавычка
			'\"' - двойная кавычка
			'\\' - обратная косая черта

		Важный момент: казалось бы, Escape-последовательности
		состоят из двух символов: косая черта и какой-нибудь знак/буква,
		но при этом вы говорим, что это char (помещаем с двух сторон
		в одинарные кавычки), а тип данных char вмещает в себя
		только один символ. Дело всё в том, что это просто вид записи,
		на самом деле Escape-последовательность - это один символ,
		которые также хранится в ASCII-таблице, и к которым также
		можно обращать через целое число. Например, к символу '\t'
		можно обратиться через номер 9
	*/

	char t = 9;
	cout << t << "TAB" << t << "TAB" << '\n';
	cout << "My name is \"Anton\'";
	cout << "\n\n\n";


	/*
		C помощью Escape-последовательность можно рисовать
		разные фигурки и закорючки
	*/
	cout << "*********\n";
	cout << "*\t*\n";
	cout << "*\t*\n";
	cout << "*\t*\n";
	cout << "*\t*\n";
	cout << "*********\n";
	for (int i = 0; i < 10; i++) {
		cout << "/|\\";
	}
	cout << endl;
	for (int i = 0; i < 10; i++) {
		cout << "\\|\/";
	}



}


