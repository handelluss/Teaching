#include <iostream>
#include <vector>
using namespace std;

int main()
{
	const int ROW = 5, COL = 4;
	
	/*
		Ниже объявление двумерного массива arr и последующее его
		заполнение пользователем.

	*/

	int arr[ROW][COL] = {}; // Весь массив заполнен нулями

	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			cin >> arr[i][j];
		}
	}

	/*
		Несложным будет объявление n-мерного массива. Например, 
		объявим четырёхмерный массив noSenseArray.
	*/

	int noSenseArray[3][2][5][4];

	/*
		То есть, массив содержит в себе три массива, которые содержат в
		себе по 2 массива, которые содержат в себе по 5 массивов,
		которые содержат в себе по 4 элемента типа int.

		В целом, более чем трёхмерных массивов тебе в работе
		с вероятностью 100% не понадобятся. 
	*/

	/*
		До данного момента при объявлении переменной мы
		эксплицитно (явно) указывали тип данной переменной: это был
		или int, или char, или bool, или что-то ещё. Но
		в языке С++ есть возможность имплицитно (скрыто) указать
		тип данных с помощью ключевого слова auto
	*/

	auto s = 1; // s будет типом int
	auto str = "ANTON"; // str будет типом string
	auto p; // ошибка - нужно инициализирировать переменную, иначе непонятно, какой тип данных


	/*
		Сейчас мы будем впервые использовать заранее кем-то написанный
		КЛАСС. В данном случае, мы будем работать с классом vector - 
		грубо говоря, это массив, в котором количество его элементов
		не статично (динамично, т.е. может изменяться)

		Для работы с вектором подключим нужную библиотеку прописав
		#include <vector>.
		Далее объявим вектор vect типа int размером 10 элементов.
	*/

	vector <int> vect(10);

	/*
		Если мы хотим заранее проинициализировать вектор каким-либо
		значением, то пропишем в скобках вторым аргументов это значение.
		Ниже, все 5 значений вектора будут двоечками. А ещё ниже все 8
		значений вектора будут символами 'a'
	*/

	vector <int> a(5, 2);
	vector <char> str(8, 'a');
	
	cout << a[3] << endl; // выведем элемент с индексом 3
	cout << str[5] << endl; // выведем элемент с индексом 5

	/*
		Класс вектор имеет множество прикольных полезных методов (функций).
		Разберём три из них:

			- push_back(значение)
				Благодаря данному методу мы положим в конец вектора 
				какое-либо значение. Т.е., вектор расширится на один элемент,
				после чего, в последний элемент присвоится данное значение

			- pop_back()
				Данный метод удаляет последний элемент вектора, т.е. 
				размер вектора уменьшится на один

			- size() 
				Данный метод возвращает размер вектора

		Применим каждый из этих методов.
	*/

	for (int i = 0; i < vect.size(); i++) {
		cin >> vect[i]; // поочерёдно из консоли вводим значения каждого элемента вектора
	}
	cout << vect.size() << "\n"; // выводим размер вектора; пока что он без изменений
	vect.push_back(10); // положим в конец вектора десятку
	vect.push_back(-666); // положим в конец вектора -666
	cout << vect.size() << "\n"; // выводим размер вектора; теперь он на два больше
	cout << vect[vect.size() - 1] << "\n"; // выведем последний элемент вектора - в нашем случае -666
	vect.pop_back(); // удалим последний элемент
	cout << vect.size() << "\n"; // выводим размер вектора; он станет на единицу меньше
}
